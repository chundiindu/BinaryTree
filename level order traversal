// Iterative Queue based Java program
// to do level order traversal
// of Binary Tree

/* importing the inbuilt java classes
required for the program */
import java.util.LinkedList;
import java.util.Queue;

/* Class to represent Tree node */
class Node {
	int data;
	Node left, right;

	public Node(int item)
	{
		data = item;
		left = null;
		right = null;
	}
}

/* Class to print Level Order Traversal */
class BinaryTree {

	Node root;

	/* Given a binary tree. Print
	its nodes in level order
	using array for implementing queue */
	void printLevelOrder()
	{
		Queue<Node> queue = new LinkedList<Node>();
		queue.add(root);
		while (!queue.isEmpty()) {

			/* poll() removes the present head.
			For more information on poll() visit
			http://www.tutorialspoint.com/java/
			util/linkedlist_poll.htm */
			Node tempNode = queue.poll();
			System.out.print(tempNode.data + " ");

			/*Enqueue left child */
			if (tempNode.left != null) {
				queue.add(tempNode.left);
			}

			/*Enqueue right child */
			if (tempNode.right != null) {
				queue.add(tempNode.right);
			}
		}
	}

	public static void main(String args[])
	{
		/* creating a binary tree and entering
		the nodes */
		BinaryTree tree_level = new BinaryTree();
		tree_level.root = new Node(1);
		tree_level.root.left = new Node(2);
		tree_level.root.right = new Node(3);
		tree_level.root.left.left = new Node(4);
		tree_level.root.left.right = new Node(5);

		System.out.println("Level order traversal
							of binary tree is - ");
		tree_level.printLevelOrder();
	}
}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
   public List<List<Integer>> levelOrder(TreeNode root) {
	Queue<TreeNode> queue = new LinkedList<>();
	List<List<Integer>> list = new ArrayList<>();
	if(root == null) return list;
	queue.add(root);

	while(!queue.isEmpty()) {
		List<Integer> tempList = new ArrayList<>();
		int size = queue.size();
		for(int i = 1; i <= size; i++) {
			TreeNode node = queue.poll();

			tempList.add(node.val);
			if(node.left != null) 
				queue.add(node.left);
			if(node.right != null) 
				queue.add(node.right);
		}
		list.add(new ArrayList<>(tempList));
	}

	return list;
}
}
